{"version":3,"sources":["/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/components/UseFetcherExample.tsx","webpack:///./src/components/UseFetcherExample.tsx?760a","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/hooks/use-fetcher.mdx","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/Preview.tsx"],"names":["UseFetcherExample","useState","json","setJson","ref","useFetcher","getJson","fetch","axios","get","data","useEffect","className","refs","JSON","stringify","onClick","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","Preview","tabNames","UseFetcherExampleSource","isMDXComponent","children","tab","setTab","childrenArray","React","Children","toArray","map","node","i","key"],"mappings":"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","file":"static/js/docs-hooks-use-fetcher.5194543a.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Fetcher, useFetcher } from 'react-fetcher-hooks';\nimport axios from 'axios';\n\nconst UseFetcherExample = () => {\n  const [json, setJson] = useState();\n  const ref = useFetcher();\n\n  function getJson() {\n    ref.fetch(() => axios.get<any>('https://api.chucknorris.io/jokes/random'), data => {\n      setJson(data);\n    });\n  }\n\n  useEffect(() => getJson(), []);\n\n  return (\n    <div className='test-container'>\n      <Fetcher refs={[ref]}>\n        <span className='my-title'>Random JSON loader</span>\n        <div className='my-content'>\n          <pre>\n            <code>{JSON.stringify(json, null, 2)}</code>\n          </pre>\n        </div>\n        <div className='my-footer'>\n          <a className='button is-primary' onClick={getJson}>\n            Refresh\n          </a>\n        </div>\n      </Fetcher>\n    </div>\n  );\n};\n\nexport default UseFetcherExample;\n","export default \"import React, { useState, useEffect } from 'react';\\nimport { Fetcher, useFetcher } from 'react-fetcher-hooks';\\nimport axios from 'axios';\\n\\nconst UseFetcherExample = () => {\\n  const [json, setJson] = useState();\\n  const ref = useFetcher();\\n\\n  function getJson() {\\n    ref.fetch(() => axios.get<any>('https://api.chucknorris.io/jokes/random'), data => {\\n      setJson(data);\\n    });\\n  }\\n\\n  useEffect(() => getJson(), []);\\n\\n  return (\\n    <div className='test-container'>\\n      <Fetcher refs={[ref]}>\\n        <span className='my-title'>Random JSON loader</span>\\n        <div className='my-content'>\\n          <pre>\\n            <code>{JSON.stringify(json, null, 2)}</code>\\n          </pre>\\n        </div>\\n        <div className='my-footer'>\\n          <a className='button is-primary' onClick={getJson}>\\n            Refresh\\n          </a>\\n        </div>\\n      </Fetcher>\\n    </div>\\n  );\\n};\\n\\nexport default UseFetcherExample;\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport 'bulma/css/bulma.css';\nimport '../../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';\nimport Preview from '../../src/Preview.tsx';\nimport UseFetcherExample from '../../src/components/UseFetcherExample';\nimport UseFetcherExampleSource from '!raw-loader!../../src/components/UseFetcherExample.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"usefetcher\"\n    }}>{`UseFetcher`}</h1>\n    <p>{`It is the most flexible hook but the most verbose. It serves as a building block for all\nthe other hooks.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"usefetcher-1\"\n    }}>{`useFetcher`}</h3>\n    <p>{`Create a simple fetcher reference.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const ref = useFetcher();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fetch\"\n    }}>{`fetch`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.fetch(request: () => AxiosPromise, onResult: data => void)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Perform a request.`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`ref.fetch(() => axios.get('users'), data => {\n  // do something with data\n});\n`}\n  </editor>\n  <editor>\n        {`ref.fetch(() => axios.get<User[]>('users'), data => {\n  // do something with data\n  // data is of type User[]\n});\n`}\n  </editor>\n    </Preview>\n    <h3 {...{\n      \"id\": \"fetchmany\"\n    }}>{`fetchMany`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.fetch(request: () => AxiosPromise[], onResult: data => void)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Perform multiple axios requests at once.`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`ref.fetch(() => [axios.get('users'), axios.get('cats')], data => {\n  // do something with data\n});\n`}\n  </editor>\n  <editor>\n        {`ref.fetch(() => [axios.get<User[]>('users'), axios.get<Cat[]>('cats')], data => {\n  // do something with data\n  // data is of type [User[], Cat[]]\n});\n`}\n  </editor>\n    </Preview>\n    <h3 {...{\n      \"id\": \"handle\"\n    }}>{`handle`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.handle(request: () => Promise, onResult: data => void)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Handle anything, as long as it returns a `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const doSomething = () => {\n  return new Promise((resolve, reject) => {\n    // Wait 3s\n    setTimeout(() => {\n      resolve('foo');\n    }, 3000);\n  });\n};\n`}</code></pre>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`ref.handle(() => doSomething(), data => {\n  // data is 'foo'\n});\n`}\n  </editor>\n  <editor>\n        {`ref.handle(() => doSomething(), data => {\n  // data is 'foo' and its type is infered\n});\n`}\n  </editor>\n    </Preview>\n    <h3 {...{\n      \"id\": \"setloading\"\n    }}>{`setLoading`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.setLoading(value: boolean)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Mnually trigger the loading state.  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`ref.setLoading(true);\nref.setLoading(false);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"seterror\"\n    }}>{`setError`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.setLoadingsetError(message: string, allowRetry: boolean)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Manually trigger the error state.  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`ref.setError('Oops!');\nref.setError('Something went wrong', true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"cancel\"\n    }}>{`cancel`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.cancel()`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Cancel the ongoing request. What that means is that the `}<inlineCode parentName=\"p\">{`onResult`}</inlineCode>{` callback will not be called if the request\never returns.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`ref.cancel();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"retry\"\n    }}>{`retry`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.retry()`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Will try again an ongoing request that has failed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`ref.retry();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n\n    <Preview mdxType=\"Preview\">\n  <UseFetcherExample mdxType=\"UseFetcherExample\" />\n  <editor>{UseFetcherExampleSource}</editor>\n    </Preview>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './index.css';\n\nexport interface PreviewProps {\n  tabNames?: string[];\n}\n\nconst Preview: React.FC<PreviewProps> = ({ children, tabNames }) => {\n  const [tab, setTab] = useState(0);\n  const childrenArray = React.Children.toArray(children);\n\n  return (\n    <div className=\"preview-container\">\n      <div className=\"tabs\">\n        <ul>\n        {\n          childrenArray.map((node, i) => \n            (\n              <li key={i} className={tab === i ? \"is-active\" : \"\"}>\n                <a onClick={() => setTab(i)}>\n                  {(tabNames || ['Result','Code'])[i]}\n                </a>\n              </li>\n            )\n          )\n        }\n        </ul>\n      </div>\n      <div className=\"tab-content\">\n        {childrenArray[tab]}\n      </div>\n    </div>\n  );\n}\n\nexport default Preview;"],"sourceRoot":""}