{"version":3,"sources":["/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/components/UseRequestExample.tsx","webpack:///./src/components/UseRequestExample.tsx?c421","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/hooks/use-request.mdx","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/Preview.tsx"],"names":["UseRequestExample","useRequest","axios","get","ref","getJson","json","className","refs","JSON","stringify","onClick","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","Preview","tabNames","UseRequestExampleSource","isMDXComponent","children","useState","tab","setTab","childrenArray","React","Children","toArray","map","node","i","key"],"mappings":"wsBAIMA,EAAoB,WAAO,IAAD,EACDC,YAC3B,kBAAMC,IAAMC,IAAS,6CACrB,GAH4B,mBACvBC,EADuB,KAClBC,EADkB,KACTC,EADS,KAM9B,OACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CAASC,KAAM,CAACJ,IACd,0BAAMG,UAAU,YAAhB,sBACA,yBAAKA,UAAU,cACb,6BACE,8BAAOE,KAAKC,UAAUJ,EAAM,KAAM,MAGtC,yBAAKC,UAAU,aACb,uBAAGA,UAAU,oBAAoBI,QAASN,GAA1C,eASKL,I,iMC7BA,s0B,sCCYf,IAKMY,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,cADR,cAGA,qDAAoC,0BAAYC,WAAW,KAAvB,cAApC,wBACA,iBAAQ,CACN,GAAM,SADR,SAGA,qBAAG,0BAAYA,WAAW,KAAvB,8EAAsH,kBAAIA,WAAW,MAAxI,8GACwG,0BAAYA,WAAW,KAAvB,YADxG,wFAEgF,0BAAYA,WAAW,KAAvB,cAFhF,OAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+EAIL,uLAEA,iBAAQ,CACN,GAAM,oBADR,oBAGA,gHACA,YAACC,EAAA,EAAD,CAASC,SAAU,CAAC,aAAc,cAAeH,QAAQ,WAC3D,2OAOA,wTAQE,iBAAQ,CACN,GAAM,YADR,YAGA,sLAEA,YAACE,EAAA,EAAD,CAASC,SAAU,CAAC,aAAc,cAAeH,QAAQ,WAC3D,2JAOA,yMASE,iBAAQ,CACN,GAAM,WADR,WAIA,YAACE,EAAA,EAAD,CAASF,QAAQ,WACnB,YAAC,EAAD,CAAmBA,QAAQ,sBAC3B,0BAASI,K,gLAMXP,EAAWQ,gBAAiB,G,0iBCzF5B,IAAMH,EAAkC,SAAC,GAA4B,IAA1BI,EAAyB,EAAzBA,SAAUH,EAAe,EAAfA,SAAe,EAC5CI,mBAAS,GADmC,mBAC3DC,EAD2D,KACtDC,EADsD,KAE5DC,EAAgBC,IAAMC,SAASC,QAAQP,GAE7C,OACE,yBAAKhB,UAAU,qBACb,yBAAKA,UAAU,QACb,4BAEEoB,EAAcI,IAAI,SAACC,EAAMC,GAAP,OAEd,wBAAIC,IAAKD,EAAG1B,UAAWkB,IAAQQ,EAAI,YAAc,IAC/C,uBAAGtB,QAAS,kBAAMe,EAAOO,MACrBb,GAAY,CAAC,SAAS,SAASa,SAQ7C,yBAAK1B,UAAU,eACZoB,EAAcF,MAMRN,M","file":"static/js/docs-hooks-use-request.e75c176f.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useRequest, Fetcher } from 'react-fetcher-hooks';\nimport axios from 'axios';\n\nconst UseRequestExample = () => {\n  const [ref, getJson, json] = useRequest(\n    () => axios.get<any>('https://api.chucknorris.io/jokes/random'),\n    true\n  );\n\n  return (\n    <div className='test-container'>\n      <Fetcher refs={[ref]}>\n        <span className='my-title'>Random JSON loader</span>\n        <div className='my-content'>\n          <pre>\n            <code>{JSON.stringify(json, null, 2)}</code>\n          </pre>\n        </div>\n        <div className='my-footer'>\n          <a className='button is-primary' onClick={getJson}>\n            Refresh\n          </a>\n        </div>\n      </Fetcher>\n    </div>\n  );\n};\n\nexport default UseRequestExample;\n","export default \"import React, { useState, useEffect } from 'react';\\nimport { useRequest, Fetcher } from 'react-fetcher-hooks';\\nimport axios from 'axios';\\n\\nconst UseRequestExample = () => {\\n  const [ref, getJson, json] = useRequest(\\n    () => axios.get<any>('https://api.chucknorris.io/jokes/random'),\\n    true\\n  );\\n\\n  return (\\n    <div className='test-container'>\\n      <Fetcher refs={[ref]}>\\n        <span className='my-title'>Random JSON loader</span>\\n        <div className='my-content'>\\n          <pre>\\n            <code>{JSON.stringify(json, null, 2)}</code>\\n          </pre>\\n        </div>\\n        <div className='my-footer'>\\n          <a className='button is-primary' onClick={getJson}>\\n            Refresh\\n          </a>\\n        </div>\\n      </Fetcher>\\n    </div>\\n  );\\n};\\n\\nexport default UseRequestExample;\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport 'bulma/css/bulma.css';\nimport '../../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';\nimport Preview from '../../src/Preview.tsx';\nimport UseRequestExample from '../../src/components/UseRequestExample';\nimport UseRequestExampleSource from '!raw-loader!../../src/components/UseRequestExample.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"userequest\"\n    }}>{`UseRequest`}</h1>\n    <p>{`This is a simpler version of `}<inlineCode parentName=\"p\">{`useFetcher`}</inlineCode>{` to avoid verbosity.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p><inlineCode parentName=\"p\">{`useRequest(request: (...args: any[]) => AxiosPromise, autoFetch?: boolean)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`This hook returns a reference, a function to trigger the request, as well as a getter and setter from `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{`.\nYou can use your own axios instance (with configured base path, for example) with `}<inlineCode parentName=\"p\">{`useRequest`}</inlineCode>{`.  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const [ref, get, items, setItems] = useRequest(() => axios.get('users'))\n`}</code></pre>\n    <p>{`When passing true to the second argument, fetching will happen as soon as the component renders,\nso there's no need to manually trigger the request on mount.`}</p>\n    <h2 {...{\n      \"id\": \"trigger-function\"\n    }}>{`Trigger Function`}</h2>\n    <p>{`You can pass parameters to the trigger function. For multiple parameters, use an array.`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`const [ref, get, item, setItem] = useRequest((id) => axios.get(\\`users/\\${id}\\`));\nconst [updateRef, update] = useRequest(([id, data]) => axios.patch(\\`users/\\${id}\\`));\nget(1);\nupdate([1, { name: 'foo'}]);\n`}\n  </editor>\n  <editor>\n        {`const [ref, get, item, setItem] = useRequest((id: number) => axios.get<User>(\\`users/\\${id}\\`));\nconst [updateRef, update] = useRequest(([id, data]: [number, User]) => axios.patch(\\`users/\\${id}\\`, data));\nget(1); // type is inferred\nupdate([1, { name: 'foo'}]); // type is inferred\n`}\n  </editor>\n    </Preview>\n    <h3 {...{\n      \"id\": \"callback\"\n    }}>{`Callback`}</h3>\n    <p>{`It is possible to pass a callback to a trigger function. It'll be called once the request is completed.\nWhen an error is encountered, it will not be called.`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`const [ref, get, item, setItem] = useRequest((id) => axios.get(\\`users/\\${id}\\`));\nget(1, result => {\n  // do something\n});\n`}\n  </editor>\n  <editor>\n        {`const [ref, get, item, setItem] = useRequest((id: number) => axios.get<User>(\\`users/\\${id}\\`));\nget(1, result => {\n  // do something\n  // type of result is 'User'\n});\n`}\n  </editor>\n    </Preview>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n\n    <Preview mdxType=\"Preview\">\n  <UseRequestExample mdxType=\"UseRequestExample\" />\n  <editor>{UseRequestExampleSource}</editor>\n    </Preview>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './index.css';\n\nexport interface PreviewProps {\n  tabNames?: string[];\n}\n\nconst Preview: React.FC<PreviewProps> = ({ children, tabNames }) => {\n  const [tab, setTab] = useState(0);\n  const childrenArray = React.Children.toArray(children);\n\n  return (\n    <div className=\"preview-container\">\n      <div className=\"tabs\">\n        <ul>\n        {\n          childrenArray.map((node, i) => \n            (\n              <li key={i} className={tab === i ? \"is-active\" : \"\"}>\n                <a onClick={() => setTab(i)}>\n                  {(tabNames || ['Result','Code'])[i]}\n                </a>\n              </li>\n            )\n          )\n        }\n        </ul>\n      </div>\n      <div className=\"tab-content\">\n        {childrenArray[tab]}\n      </div>\n    </div>\n  );\n}\n\nexport default Preview;"],"sourceRoot":""}