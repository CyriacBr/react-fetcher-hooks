{"version":3,"sources":["/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/index.mdx","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/Preview.tsx","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/components/FailExample.tsx","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/components/LoadingExample.tsx","/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/src/components/PlaceholderExample.tsx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","tabNames","isMDXComponent","Preview","children","useState","tab","setTab","childrenArray","React","Children","toArray","className","map","node","i","key","onClick","FailExample","ref","useFetcher","useEffect","fetch","axios","get","_","refs","CustomLoaderExample","setLoading","options","dimBackground","hideLoader","placeholder","show","PlaceholderExample"],"mappings":"qoBAkBMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,OADR,QAGA,oSAEgC,kBAAIC,WAAW,MAF/C,wGAIA,iBAAQ,CACN,GAAM,wCADR,wCAGA,iBAAQ,CACN,GAAM,8EADR,+EAGA,YAAC,IAAD,CAASC,SAAU,CAAC,aAAc,cAAeF,QAAQ,WAC3D,sJAMA,qKAOE,iBAAQ,CACN,GAAM,oDADR,mCAEuC,0BAAYC,WAAW,MAAvB,WAFvC,cAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0EAQL,iBAAQ,CACN,GAAM,kEADR,mEAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0CAML,iBAAQ,CACN,GAAM,4CADR,UAEc,0BAAYA,WAAW,MAAvB,WAFd,gCAGA,iBAAQ,CACN,GAAM,WADR,WAIA,YAAC,IAAD,CAAgBD,QAAQ,mBACxB,iBAAQ,CACN,GAAM,yBADR,yBAIA,YAAC,IAAD,CAAoBA,QAAQ,uBAC5B,iBAAQ,CACN,GAAM,oBADR,oBAIA,YAAC,IAAD,CAAaA,QAAQ,gBACrB,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,oEAKL,6EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qD,oKAQTJ,EAAWM,gBAAiB,G,0iBCtG5B,IAAMC,EAAkC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUH,EAAe,EAAfA,SAAe,EAC5CI,mBAAS,GADmC,mBAC3DC,EAD2D,KACtDC,EADsD,KAE5DC,EAAgBC,IAAMC,SAASC,QAAQP,GAE7C,OACE,yBAAKQ,UAAU,qBACb,yBAAKA,UAAU,QACb,4BAEEJ,EAAcK,IAAI,SAACC,EAAMC,GAAP,OAEd,wBAAIC,IAAKD,EAAGH,UAAWN,IAAQS,EAAI,YAAc,IAC/C,uBAAGE,QAAS,kBAAMV,EAAOQ,MACrBd,GAAY,CAAC,SAAS,SAASc,SAQ7C,yBAAKH,UAAU,eACZJ,EAAcF,MAMRH,M,mOCpCf,2IAIMe,EAAc,WAClB,IAAMC,EAAMC,cAKZ,OAJAC,oBAAU,WACRF,EAAIG,MAAM,kBAAMC,IAAMC,IAAI,gCAAgC,SAAAC,OACzD,IAGD,yBAAKb,UAAU,kBACb,kBAAC,IAAD,CAASc,KAAMP,GACb,yuBAeOD,M,yPC5Bf,yFAIMS,EAAsB,WAC1B,IAAMR,EAAMC,cAGZ,OAFAD,EAAIS,YAAW,GAGb,yBAAKhB,UAAU,kBACb,kBAAC,IAAD,CAASc,KAAMP,GACb,yuBAeOQ,M,wQC1Bf,yFAGME,EAA0B,CAC9BC,eAAe,EACfC,YAAY,EACZC,YAAa,CACXC,MAAM,IAIJC,EAAqB,WACzB,IAAMf,EAAMC,cAGZ,OAFAD,EAAIS,YAAW,GAGb,yBAAKhB,UAAU,kBACb,kBAAC,IAAD,CAASc,KAAMP,EAAKU,QAASA,GAC3B,0BAAMjB,UAAU,OAAhB,uBACA,6BACA,0BAAMA,UAAU,OAAhB,2aAYOsB,M","file":"static/js/docs-index.64f514b0.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport 'bulma/css/bulma.css';\nimport '../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';\nimport Preview from '../src/Preview.tsx';\nimport LoadingExample from '../src/components/LoadingExample.tsx';\nimport PlaceholderExample from '../src/components/PlaceholderExample.tsx';\nimport FailExample from '../src/components/FailExample.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"why\"\n    }}>{`Why?`}</h1>\n    <p>{`The goal of this library is to take away the pain of manually handling fetching states (idle, loading, error)\nand their visual feedback. Just hand over an HTTP request to the various hooks this library offers, and let it handle the\nvisual feedbacks and the what-ifs.`}<br parentName=\"p\"></br>{`\n`}{`It reduces boilerplate but also give you a wide range of customization tools for general usage.`}</p>\n    <h1 {...{\n      \"id\": \"an-example-is-worth-a-thousand-words\"\n    }}>{`An example is worth a thousand words`}</h1>\n    <h3 {...{\n      \"id\": \"1-create-a-fetcher-reference-using-one-of-the-6-hooks-the-library-provides\"\n    }}>{`1. Create a fetcher reference using one of the 6 hooks the library provides`}</h3>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`const ref = useFetcher();\n// or\nconst [ref, getItem, item] = useRequest((id) => axios.get(\\`myapi.com/items/\\${id}\\`));\n`}\n  </editor>\n  <editor>\n        {`const ref = useFetcher();\n// or\nconst [ref, getItem, item] = useRequest((id: number) => axios.get<Item>(\\`myapi.com/items/\\${id}\\`));\n`}\n  </editor>\n    </Preview>\n    <h4 {...{\n      \"id\": \"2-wrap-your-content-around-the-fetcher-component\"\n    }}>{`2. Wrap your content around the `}<inlineCode parentName=\"h4\">{`Fetcher`}</inlineCode>{` component`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<div>\n  <Fetcher refs={ref}>\n    My content\n  </Fetcher>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"3-use-the-fetcher-reference-to-perform-http-or-custom-requests\"\n    }}>{`3. Use the fetcher reference to perform HTTP or custom requests`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`ref.fetch(...);\n// or\ngetItem(1);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"4-let-fetcher-handle-the-visual-feedback\"\n    }}>{`4. Let `}<inlineCode parentName=\"h4\">{`Fetcher`}</inlineCode>{` handle the visual feedback:`}</h4>\n    <h5 {...{\n      \"id\": \"loading\"\n    }}>{`Loading`}</h5>\n\n    <LoadingExample mdxType=\"LoadingExample\" />\n    <h5 {...{\n      \"id\": \"with-auto-placeholder\"\n    }}>{`With Auto Placeholder`}</h5>\n\n    <PlaceholderExample mdxType=\"PlaceholderExample\" />\n    <h5 {...{\n      \"id\": \"error-with-retry\"\n    }}>{`Error with retry`}</h5>\n\n    <FailExample mdxType=\"FailExample\" />\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add react-fetcher-hooks\nnpm install react-fetcher-hooks\n`}</code></pre>\n    <p>{`Make sure to add the library CSS file to your build:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import 'react-fetcher-hooks/dist/styles.css';\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './index.css';\n\nexport interface PreviewProps {\n  tabNames?: string[];\n}\n\nconst Preview: React.FC<PreviewProps> = ({ children, tabNames }) => {\n  const [tab, setTab] = useState(0);\n  const childrenArray = React.Children.toArray(children);\n\n  return (\n    <div className=\"preview-container\">\n      <div className=\"tabs\">\n        <ul>\n        {\n          childrenArray.map((node, i) => \n            (\n              <li key={i} className={tab === i ? \"is-active\" : \"\"}>\n                <a onClick={() => setTab(i)}>\n                  {(tabNames || ['Result','Code'])[i]}\n                </a>\n              </li>\n            )\n          )\n        }\n        </ul>\n      </div>\n      <div className=\"tab-content\">\n        {childrenArray[tab]}\n      </div>\n    </div>\n  );\n}\n\nexport default Preview;","import React, { useEffect } from 'react';\nimport { useFetcher, Fetcher } from 'react-fetcher-hooks';\nimport axios from 'axios';\n\nconst FailExample = () => {\n  const ref = useFetcher();\n  useEffect(() => {\n    ref.fetch(() => axios.get('https://impossible.path/api'), _ => {});\n  }, []);\n\n  return (\n    <div className='test-container'>\n      <Fetcher refs={ref}>\n        <span>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas fermentum accumsan\n          lorem, id tristique erat. Ut elementum dui lobortis ex eleifend eleifend. Curabitur\n          scelerisque odio ac tellus volutpat, nec tempor justo tristique. Vivamus tincidunt sem nec\n          ornare tempor. Maecenas at tellus ac arcu convallis pulvinar. Cras cursus, massa ut varius\n          laoreet, sem dui faucibus nulla, in imperdiet lacus nulla vitae ante. Mauris nec sapien\n          tristique, placerat sapien vel, suscipit magna. Cras purus risus, blandit at quam quis,\n          luctus feugiat nisl. Duis ultrices semper eros, vel sagittis sapien pharetra in. Fusce est\n          mauris, rhoncus et molestie ut, faucibus non tortor. Vivamus accumsan blandit consectetur.\n        </span>\n      </Fetcher>\n    </div>\n  );\n};\n\nexport default FailExample;\n","import React, { useEffect } from 'react';\nimport { useFetcher, Fetcher } from 'react-fetcher-hooks';\nimport { BeatLoader } from 'react-spinners';\n\nconst CustomLoaderExample = () => {\n  const ref = useFetcher();\n  ref.setLoading(true);\n\n  return (\n    <div className='test-container'>\n      <Fetcher refs={ref}>\n        <span>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas fermentum accumsan\n          lorem, id tristique erat. Ut elementum dui lobortis ex eleifend eleifend. Curabitur\n          scelerisque odio ac tellus volutpat, nec tempor justo tristique. Vivamus tincidunt sem nec\n          ornare tempor. Maecenas at tellus ac arcu convallis pulvinar. Cras cursus, massa ut varius\n          laoreet, sem dui faucibus nulla, in imperdiet lacus nulla vitae ante. Mauris nec sapien\n          tristique, placerat sapien vel, suscipit magna. Cras purus risus, blandit at quam quis,\n          luctus feugiat nisl. Duis ultrices semper eros, vel sagittis sapien pharetra in. Fusce est\n          mauris, rhoncus et molestie ut, faucibus non tortor. Vivamus accumsan blandit consectetur.\n        </span>\n      </Fetcher>\n    </div>\n  );\n};\n\nexport default CustomLoaderExample;\n","import React, { useEffect } from 'react';\nimport { useFetcher, Fetcher, FetcherOptions } from 'react-fetcher-hooks';\n\nconst options: FetcherOptions = {\n  dimBackground: false,\n  hideLoader: true,\n  placeholder: {\n    show: true\n  }\n};\n\nconst PlaceholderExample = () => {\n  const ref = useFetcher();\n  ref.setLoading(true);\n\n  return (\n    <div className='test-container'>\n      <Fetcher refs={ref} options={options}>\n        <span className='--p'>Placeholder Example</span>\n        <br />\n        <span className='--p'>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas fermentum accumsan\n          lorem, id tristique erat. Ut elementum dui lobortis ex eleifend eleifend. Curabitur\n          scelerisque odio ac tellus volutpat, nec tempor justo tristique. Vivamus tincidunt sem nec\n          ornare tempor. Maecenas at tellus ac arcu convallis pulvinar. Cras cursus, massa ut varius\n          laoreet, sem dui faucibus nulla, in imperdiet lacus nulla vitae ante.\n        </span>\n      </Fetcher>\n    </div>\n  );\n};\n\nexport default PlaceholderExample;\n"],"sourceRoot":""}