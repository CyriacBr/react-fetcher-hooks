{"remainingRequest":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/babel-loader/lib/index.js??ref--6-1!/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/@mdx-js/loader/index.js??ref--6-2!/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/source-map-loader/index.js!/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/states/loading.mdx","dependencies":[{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/states/loading.mdx","mtime":1570458073966},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1562869367178},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/babel-loader/lib/index.js","mtime":1562869367050},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/@mdx-js/loader/index.js","mtime":1570479562039},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/source-map-loader/index.js","mtime":1562869367869}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/states/loading.mdx"],"names":["React","mdx","LoadingExample","CustomLoaderExample","ProgressExample","PlaceholderExample","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport 'bulma/css/bulma.css';\nimport '../../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';\nimport LoadingExample from '../../src/components/LoadingExample.tsx';\nimport CustomLoaderExample from '../../src/components/CustomLoaderExample.tsx';\nimport ProgressExample from '../../src/components/ProgressExample.tsx';\nimport PlaceholderExample from '../../src/components/PlaceholderExample.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"loading\"\n    }}>{`Loading`}</h1>\n    <p>{`When a reference tied to `}<inlineCode parentName=\"p\">{`Fetcher`}</inlineCode>{` performs a request, a blocking overlay will render showing a\ncustomizable loader component:`}</p>\n\n    <LoadingExample mdxType=\"LoadingExample\" />\n    <h2 {...{\n      \"id\": \"custom-loader\"\n    }}>{`Custom Loader`}</h2>\n    <p>{`Using options, it is possible to pass a custom loader component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { BeatLoader } from 'react-spinners';\nconst options = {\n  loaderComponent: ({ color }) => <BeatLoader color={color} />\n};\n`}</code></pre>\n\n    <CustomLoaderExample mdxType=\"CustomLoaderExample\" />\n    <h2 {...{\n      \"id\": \"progress-bar\"\n    }}>{`Progress Bar`}</h2>\n    <p><inlineCode parentName=\"p\">{`react-fetcher-hooks`}</inlineCode>{` also contains a built-in progress bar. You can toggle it on using `}<inlineCode parentName=\"p\">{`Fetcher`}</inlineCode>{` options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const options = {\n  progress: { show: true }\n};\n`}</code></pre>\n\n    <ProgressExample mdxType=\"ProgressExample\" />\n    <h2 {...{\n      \"id\": \"placeholder\"\n    }}>{`Placeholder`}</h2>\n    <p>{`By customizing the `}<inlineCode parentName=\"p\">{`placeholder`}</inlineCode>{` option, it is possible to show a placeholder overlay while a request is pending.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const options = {\n  placeholder: { show: true }\n};\n`}</code></pre>\n\n    <PlaceholderExample mdxType=\"PlaceholderExample\" />\n    <p>{`There are many ways to come up with a placeholder component, but `}<inlineCode parentName=\"p\">{`react-fetcher-hooks`}</inlineCode>{` has a built-in\nfunctionnality which render placeholder blocks on top of your content based on a specific CSS class.\nBy default it is `}<inlineCode parentName=\"p\">{`--p`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<div className='test-container'>\n  <Fetcher refs={[ref]} options={options}>\n    <span className='--p'>Placeholder Example</span>\n    <br />\n    <span className='--p'>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas fermentum accumsan\n      lorem, id tristique erat. Ut elementum dui lobortis ex eleifend eleifend. Curabitur\n      scelerisque odio ac tellus volutpat, nec tempor justo tristique. Vivamus tincidunt sem nec\n      ornare tempor. Maecenas at tellus ac arcu convallis pulvinar. Cras cursus, massa ut varius\n      laoreet, sem dui faucibus nulla, in imperdiet lacus nulla vitae ante.\n    </span>\n  </Fetcher>\n</div>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]}]}