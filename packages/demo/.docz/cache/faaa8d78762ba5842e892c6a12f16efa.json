{"remainingRequest":"/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/babel-loader/lib/index.js??ref--6-1!/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/@mdx-js/loader/index.js??ref--6-2!/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/source-map-loader/index.js!/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/usage/fetcher-reference.mdx","dependencies":[{"path":"/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/usage/fetcher-reference.mdx","mtime":1573220333037},{"path":"/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1572980644110},{"path":"/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/babel-loader/lib/index.js","mtime":1572807047183},{"path":"/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/@mdx-js/loader/index.js","mtime":1572980643543},{"path":"/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/source-map-loader/index.js","mtime":1572980619128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvbW50LzBDQzUxNjZCMENDNTE2NkIvV29yay9yZWFjdC1mZXRjaGVyLWhvb2tzL25vZGVfbW9kdWxlcy9kb2N6LWNvcmUvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvbW50LzBDQzUxNjZCMENDNTE2NkIvV29yay9yZWFjdC1mZXRjaGVyLWhvb2tzL3BhY2thZ2VzL2RlbW8vZG9jcy91c2FnZS9mZXRjaGVyLXJlZmVyZW5jZS5tZHgiOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwuZW50ZXJNb2R1bGUgOiB1bmRlZmluZWQ7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCnZhciBfX3NpZ25hdHVyZV9fID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmRlZmF1bHQuc2lnbmF0dXJlIDogZnVuY3Rpb24gKGEpIHsKICByZXR1cm4gYTsKfTsKCmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7CmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnOwovKiBAanN4IG1keCAqLwoKaW1wb3J0ICdidWxtYS9jc3MvYnVsbWEuY3NzJzsKaW1wb3J0ICcuLi8uLi9zcmMvaW5kZXguY3NzJzsKaW1wb3J0ICdyZWFjdC1mZXRjaGVyLWhvb2tzL2Rpc3Qvc3R5bGVzLmNzcyc7CmltcG9ydCBQcmV2aWV3IGZyb20gJy4uLy4uL3NyYy9QcmV2aWV3LnRzeCc7Cgpjb25zdCBtYWtlU2hvcnRjb2RlID0gbmFtZSA9PiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7CiAgY29uc29sZS53YXJuKCJDb21wb25lbnQgIiArIG5hbWUgKyAiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTsKICByZXR1cm4gbWR4KCJkaXYiLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTMKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSk7Cn07Cgpjb25zdCBsYXlvdXRQcm9wcyA9IHt9Owpjb25zdCBNRFhMYXlvdXQgPSAid3JhcHBlciI7CmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZikgewogIGxldCBjb21wb25lbnRzID0gX3JlZi5jb21wb25lbnRzLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbImNvbXBvbmVudHMiXSk7CgogIHJldHVybiBtZHgoTURYTGF5b3V0LCBPYmplY3QuYXNzaWduKHt9LCBsYXlvdXRQcm9wcywgcHJvcHMsIHsKICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsCiAgICBtZHhUeXBlOiAiTURYTGF5b3V0IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksIG1keCgiaDEiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJmZXRjaGVyLXJlZmVyZW5jZSIKICB9LCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0pLCAiRmV0Y2hlciBSZWZlcmVuY2UiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiVGhlICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI5CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgIkZldGNoZXIiKSwgIiBjb21wb25lbnQgcmVhY3RzIHRvIHRoZSBiZWhhdmlvciBvZiB0aGUgcmVmZXJlbmNlcyBpdCBpcyB0aWVkIHRvLlxuQSByZWZlcmVuY2UgaXMgYmFzaWNhbGx5IGFuIEFQSSB0aGF0IGxldCB5b3Ugc2VuZCBIVFRQIChidXQgbm90IG9ubHkpIHJlcXVlc3RzIHdpdGggYSBzaW1wbGlmaWVkIHN5bnRheC5cbllvdSBjYW4gY3JlYXRlIGEgcmVmZXJlbmNlIHVzaW5nIG9uZSBvZiB0aGUgaG9va3MgdGhlIGxpYnJhcnkgcHJvdmlkZXMuXG5Ob3RlIHRoYXQgd2l0aCB0aGUgYnVpbHQtaW4gaG9va3MsIG9uZ29pbmcgcmVxdWVzdHMgYXJlIGNhbmNlbGxlZCB3aGVuIHlvdXIgY29tcG9uZW50IHVubW91dHMsIHNvIHlvdVxuZG8gbm90IG5lZWQgdG8gc2V0IHVwIG1hbnVhbGx5IGEgY2xlYW51cCBmdW5jdGlvbi4iKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImV4YW1wbGUiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIkV4YW1wbGUiKSwgbWR4KCJwIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMzcKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiSGVyZSdzIGFuIGV4YW1wbGUgb24gaG93IHRvIGZldGNoIGZyb20gYSBSRVNUIEdFVCBlbmRwb2ludCB3aXRoICIsIG1keCgiaW5saW5lQ29kZSIsIHsKICAgIHBhcmVudE5hbWU6ICJwIiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM3CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgInVzZVJlcXVlc3QiKSwgIiwgd2hpY2ggbGV0IHlvdSB1c2UgeW91ciBvd24gYXhpb3MgaW5zdGFuY2U6IiksIG1keChQcmV2aWV3LCB7CiAgICB0YWJOYW1lczogWydKYXZhU2NyaXB0JywgJ1R5cGVTY3JpcHQnXSwKICAgIG1keFR5cGU6ICJQcmV2aWV3IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDM4CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgbWR4KCJlZGl0b3IiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzOQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJjb25zdCBbcmVmLCBnZXQsIGl0ZW1zXSA9IHVzZVJlcXVlc3QoKCkgPT4gYXhpb3MuZ2V0KCdodHRwOi8vbXlhcGkuY29tJyksIHRydWUpO1xuLy8tLSAnaXRlbXMnIGlzIHRoZSByZXN1bHQgb2YgdGhlIGF4aW9zIHJlcXVlc3Rcbi8vLS0gJ2dldCcgY2FuIGJlIGNhbGxlZCBhdCBsYXRlciBkYXRlIHRvIHJlLWZldGNoXG4vLy4uLlxuPEZldGNoZXIgcmVmcz17cmVmfT5cbiAgTXkgQ29udGVudFxuPC9GZXRjaGVyPlxuIiksIG1keCgiZWRpdG9yIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNDkKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiY29uc3QgW3JlZiwgZ2V0LCBpdGVtc10gPSB1c2VSZXF1ZXN0KCgpID0+IGF4aW9zLmdldDxJdGVtW10+KCdodHRwOi8vbXlhcGkuY29tJyksIHRydWUpO1xuLy8tLSAnaXRlbXMnIGlzIHRoZSByZXN1bHQgb2YgdGhlIGF4aW9zIHJlcXVlc3Rcbi8vLS0gJ2dldCcgY2FuIGJlIGNhbGxlZCBhdCBsYXRlciBkYXRlIHRvIHJlLWZldGNoXG4vLy4uLlxuPEZldGNoZXIgcmVmcz17cmVmfT5cbiAgTXkgQ29udGVudFxuPC9GZXRjaGVyPlxuIikpLCAiSG93ZXZlciwgeW91IGFyZSBmcmVlIHRvIHVzZSB0aGUgaG9va3Mgd2l0aG91dCBgRmV0Y2hlcmAuIEhlcmUncyBhbm90aGVyIGV4YW1wbGUgZm9yIGEgQ1JVRCBjbGllbnQgaW1wbGVtZW50YXRpb24uIiwgbWR4KFByZXZpZXcsIHsKICAgIHRhYk5hbWVzOiBbJ0phdmFTY3JpcHQnLCAnVHlwZVNjcmlwdCddLAogICAgbWR4VHlwZTogIlByZXZpZXciLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogNjIKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImVkaXRvciIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDYzCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImNvbnN0IFtnZXRSZWYsIGdldEl0ZW1zLCBpdGVtc10gPSB1c2VSZXF1ZXN0KCgpID0+IGF4aW9zLmdldCgnaHR0cDovL215YXBpLmNvbScpLCB0cnVlKTtcbmNvbnN0IFtwb3N0UmVmLCBwb3N0SXRlbV0gPSB1c2VSZXF1ZXN0KChkYXRhKSA9PiBheGlvcy5wb3N0KCdodHRwOi8vbXlhcGkuY29tLycsIGRhdGEpKTtcbmNvbnN0IFtkZWxldGVSZWYsIGRlbGV0ZUl0ZW1dID0gdXNlUmVxdWVzdCgoaWQpID0+IGF4aW9zLmRlbGV0ZSgnaHR0cDovL215YXBpLmNvbS8nICsgaWQpKTtcbmNvbnN0IFt1cGRhdGVSZWYsIHVwZGF0ZUl0ZW1dID0gdXNlUmVxdWVzdCgoW2lkLCBkYXRhXSkgPT4gYXhpb3MucGF0Y2goJ2h0dHA6Ly9teWFwaS5jb20vJyArIGlkLCBkYXRhKSk7XG4pO1xuXG4vLy0tIFVzYWdlXG5nZXRJdGVtcygpO1xucG9zdEl0ZW0oZGF0YSk7XG5kZWxldGVJdGVtKDEpOyBcbnVwZGF0ZUl0ZW0oXG4vLy4uLlxuPEZldGNoZXIgcmVmcz17W2dldFJlZiwgcG9zdFJlZiwgdXBkYXRlUmVmLCBkZWxldGVSZWZdfT5cbiAgTXkgQ29udGVudFxuPC9GZXRjaGVyPlxuIiksIG1keCgiZWRpdG9yIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCAiY29uc3QgW2dldFJlZiwgZ2V0SXRlbXMsIGl0ZW1zXSA9IHVzZVJlcXVlc3QoKCkgPT4gYXhpb3MuZ2V0PEl0ZW1bXT4oJ2h0dHA6Ly9teWFwaS5jb20nKSwgdHJ1ZSk7XG5jb25zdCBbcG9zdFJlZiwgcG9zdEl0ZW1dID0gdXNlUmVxdWVzdCgoZGF0YTogSXRlbSkgPT4gYXhpb3MucG9zdDxJdGVtPignaHR0cDovL215YXBpLmNvbS8nLCBkYXRhKSk7XG5jb25zdCBbZGVsZXRlUmVmLCBkZWxldGVJdGVtXSA9IHVzZVJlcXVlc3QoKGlkOiBudW1iZXIpID0+IGF4aW9zLmRlbGV0ZSgnaHR0cDovL215YXBpLmNvbS8nICsgaWQpKTtcbmNvbnN0IFt1cGRhdGVSZWYsIHVwZGF0ZUl0ZW1dID0gdXNlUmVxdWVzdCgoW2lkLCBkYXRhXTogW251bWJlciwgSXRlbV0pID0+IGF4aW9zLnBhdGNoPEl0ZW0+KCdodHRwOi8vbXlhcGkuY29tLycgKyBpZCwgZGF0YSkpO1xuKTtcblxuLy8tLSBVc2FnZVxuZ2V0SXRlbXMoKTtcbnBvc3RJdGVtKGRhdGEpO1xuZGVsZXRlSXRlbSgxKTsgXG51cGRhdGVJdGVtKFxuLy8uLi5cbjxGZXRjaGVyIHJlZnM9e1tnZXRSZWYsIHBvc3RSZWYsIHVwZGF0ZVJlZiwgZGVsZXRlUmVmXX0+XG4gIE15IENvbnRlbnRcbjwvRmV0Y2hlcj5cbiIpKSwgbWR4KCJoMiIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogImNvbXBvc2FiaWxpdHkiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTAwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJDb21wb3NhYmlsaXR5IiksIG1keCgicCIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEwMwogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJCZWNhdXNlIGZldGNoaW5nIGlzIGJhc2VkIG9uIGhvb2tzLCB5b3UgY2FuIGNvbWJpbmUsIHJldXNlIHRoZW0gYW5kIGNyZWF0ZSB5b3VyIG93biBjdXN0b20gaG9va3NcbnRvIGdhaW4gaW4gcmVhZGFiaWxpdHkgYW5kIHNpbXBsaWNpdHkuIFRoZSBsaWJyYXJ5IGNvbnRhaW5zIGEgYnVpbHQtaW4gaG9vayB3aGljaCByZWZsZWN0cyBqdXN0IHRoYXQuIiksIG1keChQcmV2aWV3LCB7CiAgICB0YWJOYW1lczogWydKYXZhU2NyaXB0JywgJ1R5cGVTY3JpcHQnXSwKICAgIG1keFR5cGU6ICJQcmV2aWV3IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEwNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiZWRpdG9yIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTA2CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSwgImNvbnN0IHVzZXJzID0gdXNlQ1JVRFJlcXVlc3QoJ2h0dHA6Ly9teWFwaS5jb20vdXNlcnMnKTtcbik7XG5cbi8vLS0gVXNhZ2VcbnVzZXJzLmdldCgpO1xudXNlcnMuaXRlbXM7IC8vLS0gR0VUIHJlc3VsdHNcbnVzZXJzLnBvc3QoZGF0YSk7XG51c2Vycy5kZWxldGUoMSk7XG51c2Vycy51cGRhdGUoXG4vLy4uLlxuPEZldGNoZXIgcmVmcz17dXNlcnMucmVmc30+XG4gIE15IENvbnRlbnRcbjwvRmV0Y2hlcj5cbiIpLCBtZHgoImVkaXRvciIsIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDEyMgogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJjb25zdCB1c2VycyA9IHVzZUNSVURSZXF1ZXN0PEl0ZW0+KCdodHRwOi8vbXlhcGkuY29tL3VzZXJzJyk7XG4pO1xuXG4vLy0tIFVzYWdlXG51c2Vycy5nZXQoKTtcbnVzZXJzLml0ZW1zOyAvLy0tIEdFVCByZXN1bHRzXG51c2Vycy5wb3N0KGRhdGEpO1xudXNlcnMuZGVsZXRlKDEpO1xudXNlcnMudXBkYXRlKFxuLy8uLi5cbjxGZXRjaGVyIHJlZnM9e3VzZXJzLnJlZnN9PlxuICBNeSBDb250ZW50XG48L0ZldGNoZXI+XG4iKSkpOwp9CgppZiAodHlwZW9mIE1EWENvbnRlbnQgIT09ICd1bmRlZmluZWQnICYmIE1EWENvbnRlbnQgJiYgTURYQ29udGVudCA9PT0gT2JqZWN0KE1EWENvbnRlbnQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoTURYQ29udGVudCkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURYQ29udGVudCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIk1EWENvbnRlbnQiLAogICAgICBmaWxlbmFtZTogImRvY3MvdXNhZ2UvZmV0Y2hlci1yZWZlcmVuY2UubWR4IgogICAgfQogIH0pOwp9Cgo7Ck1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlOwo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbC5kZWZhdWx0IDogdW5kZWZpbmVkOwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvbW50LzBDQzUxNjZCMENDNTE2NkIvV29yay9yZWFjdC1mZXRjaGVyLWhvb2tzL3BhY2thZ2VzL2RlbW8vZG9jcy91c2FnZS9mZXRjaGVyLXJlZmVyZW5jZS5tZHgiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9tbnQvMENDNTE2NkIwQ0M1MTY2Qi9Xb3JrL3JlYWN0LWZldGNoZXItaG9va3MvcGFja2FnZXMvZGVtby9kb2NzL3VzYWdlL2ZldGNoZXItcmVmZXJlbmNlLm1keCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKE1EWExheW91dCwgIk1EWExheW91dCIsICIvbW50LzBDQzUxNjZCMENDNTE2NkIvV29yay9yZWFjdC1mZXRjaGVyLWhvb2tzL3BhY2thZ2VzL2RlbW8vZG9jcy91c2FnZS9mZXRjaGVyLXJlZmVyZW5jZS5tZHgiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvbW50LzBDQzUxNjZCMENDNTE2NkIvV29yay9yZWFjdC1mZXRjaGVyLWhvb2tzL3BhY2thZ2VzL2RlbW8vZG9jcy91c2FnZS9mZXRjaGVyLXJlZmVyZW5jZS5tZHgiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmxlYXZlTW9kdWxlIDogdW5kZWZpbmVkOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/mnt/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/usage/fetcher-reference.mdx"],"names":["React","mdx","Preview","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA,OAAO,qBAAP;AACA,OAAO,qBAAP;AACA,OAAO,qCAAP;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,aAAa,GAAGC,IAAI,IAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,EAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,SAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAHD;;AAKA,MAAMG,WAAW,GAAG,EAApB;AAGA,MAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAW;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAX,qZALK,EAUL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVK,EAaL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAAuE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAvE,iDAbK,EAcL,IAAC,OAAD;AAAS,IAAA,QAAQ,EAAE,CAAC,YAAD,EAAe,YAAf,CAAnB;AAAiD,IAAA,OAAO,EAAC,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sPADE,EAWF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8PAXE,CAdK,wHAsCL,IAAC,OAAD;AAAS,IAAA,QAAQ,EAAE,CAAC,YAAD,EAAe,YAAf,CAAnB;AAAiD,IAAA,OAAO,EAAC,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4iBADE,EAmBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8lBAnBE,CAtCK,EA4EL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5EK,EA+EL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+MA/EK,EAiFL,IAAC,OAAD;AAAS,IAAA,QAAQ,EAAE,CAAC,YAAD,EAAe,YAAf,CAAnB;AAAiD,IAAA,OAAO,EAAC,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kPADE,EAiBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wPAjBE,CAjFK,CAAP;AAoHD;;;;;;;;;;;;;AAED;AACAD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BApIMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport 'bulma/css/bulma.css';\nimport '../../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';\nimport Preview from '../../src/Preview.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"fetcher-reference\"\n    }}>{`Fetcher Reference`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Fetcher`}</inlineCode>{` component reacts to the behavior of the references it is tied to.\nA reference is basically an API that let you send HTTP (but not only) requests with a simplified syntax.\nYou can create a reference using one of the hooks the library provides.\nNote that with the built-in hooks, ongoing requests are cancelled when your component unmouts, so you\ndo not need to set up manually a cleanup function.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Here's an example on how to fetch from a REST GET endpoint with `}<inlineCode parentName=\"p\">{`useRequest`}</inlineCode>{`, which let you use your own axios instance:`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`const [ref, get, items] = useRequest(() => axios.get('http://myapi.com'), true);\n//-- 'items' is the result of the axios request\n//-- 'get' can be called at later date to re-fetch\n//...\n<Fetcher refs={ref}>\n  My Content\n</Fetcher>\n`}\n  </editor>\n  <editor>\n        {`const [ref, get, items] = useRequest(() => axios.get<Item[]>('http://myapi.com'), true);\n//-- 'items' is the result of the axios request\n//-- 'get' can be called at later date to re-fetch\n//...\n<Fetcher refs={ref}>\n  My Content\n</Fetcher>\n`}\n  </editor>\n    </Preview>\nHowever, you are free to use the hooks without `Fetcher`.\nHere's another example for a CRUD client implementation.\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`const [getRef, getItems, items] = useRequest(() => axios.get('http://myapi.com'), true);\nconst [postRef, postItem] = useRequest((data) => axios.post('http://myapi.com/', data));\nconst [deleteRef, deleteItem] = useRequest((id) => axios.delete('http://myapi.com/' + id));\nconst [updateRef, updateItem] = useRequest(([id, data]) => axios.patch('http://myapi.com/' + id, data));\n);\n\n//-- Usage\ngetItems();\npostItem(data);\ndeleteItem(1); \nupdateItem(\n//...\n<Fetcher refs={[getRef, postRef, updateRef, deleteRef]}>\n  My Content\n</Fetcher>\n`}\n  </editor>\n  <editor>\n        {`const [getRef, getItems, items] = useRequest(() => axios.get<Item[]>('http://myapi.com'), true);\nconst [postRef, postItem] = useRequest((data: Item) => axios.post<Item>('http://myapi.com/', data));\nconst [deleteRef, deleteItem] = useRequest((id: number) => axios.delete('http://myapi.com/' + id));\nconst [updateRef, updateItem] = useRequest(([id, data]: [number, Item]) => axios.patch<Item>('http://myapi.com/' + id, data));\n);\n\n//-- Usage\ngetItems();\npostItem(data);\ndeleteItem(1); \nupdateItem(\n//...\n<Fetcher refs={[getRef, postRef, updateRef, deleteRef]}>\n  My Content\n</Fetcher>\n`}\n  </editor>\n    </Preview>\n    <h2 {...{\n      \"id\": \"composability\"\n    }}>{`Composability`}</h2>\n    <p>{`Because fetching is based on hooks, you can combine, reuse them and create your own custom hooks\nto gain in readability and simplicity. The library contains a built-in hook which reflects just that.`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`const users = useCRUDRequest('http://myapi.com/users');\n);\n\n//-- Usage\nusers.get();\nusers.items; //-- GET results\nusers.post(data);\nusers.delete(1);\nusers.update(\n//...\n<Fetcher refs={users.refs}>\n  My Content\n</Fetcher>\n`}\n  </editor>\n  <editor>\n        {`const users = useCRUDRequest<Item>('http://myapi.com/users');\n);\n\n//-- Usage\nusers.get();\nusers.items; //-- GET results\nusers.post(data);\nusers.delete(1);\nusers.update(\n//...\n<Fetcher refs={users.refs}>\n  My Content\n</Fetcher>\n`}\n  </editor>\n    </Preview>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]}]}