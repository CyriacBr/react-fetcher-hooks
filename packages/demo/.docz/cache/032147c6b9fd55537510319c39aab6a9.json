{"remainingRequest":"/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/node_modules/babel-loader/lib/index.js??ref--6-1!/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/node_modules/@mdx-js/loader/index.js??ref--6-2!/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/node_modules/source-map-loader/index.js!/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/packages/demo/docs/hooks/use-fetcher.mdx","dependencies":[{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/packages/demo/docs/hooks/use-fetcher.mdx","mtime":1570464945808},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1562869367178},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/node_modules/babel-loader/lib/index.js","mtime":1562869367050},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/node_modules/@mdx-js/loader/index.js","mtime":1570381059231},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/node_modules/source-map-loader/index.js","mtime":1562869367869}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/media/cyriac/0CC5166B0CC5166B/Work/react-use-fetcher/packages/demo/docs/hooks/use-fetcher.mdx"],"names":["React","mdx","Preview","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Preview from '../../src/Preview.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"usefetcher\"\n    }}>{`UseFetcher`}</h1>\n    <p>{`It is the most flexible hook but the most verbose. It serves as a building block for all\nthe other hooks.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"usefetcher-1\"\n    }}>{`useFetcher`}</h3>\n    <p>{`Create a simple fetcher reference.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const ref = useFetcher();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fetch\"\n    }}>{`fetch`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.fetch(request: () => AxiosPromise, onResult: data => void)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Perform a request.`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`ref.fetch(() => axios.get('users'), data => {\n  // do something with data\n});\n`}\n  </editor>\n  <editor>\n        {`ref.fetch(() => axios.get<User[]>('users'), data => {\n  // do something with data\n  // data is of type User[]\n});\n`}\n  </editor>\n    </Preview>\n    <h3 {...{\n      \"id\": \"fetchmany\"\n    }}>{`fetchMany`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.fetch(request: () => AxiosPromise[], onResult: data => void)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Perform multiple axios requests at once.`}</p>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`ref.fetch(() => [axios.get('users'), axios.get('cats')], data => {\n  // do something with data\n});\n`}\n  </editor>\n  <editor>\n        {`ref.fetch(() => [axios.get<User[]>('users'), axios.get<Cat[]>('cats')], data => {\n  // do something with data\n  // data is of type [User[], Cat[]]\n});\n`}\n  </editor>\n    </Preview>\n    <h3 {...{\n      \"id\": \"handle\"\n    }}>{`handle`}</h3>\n    <p><inlineCode parentName=\"p\">{`FetcherRef.handle(request: () => Promise, onResult: data => void)`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`Handle anything, as long as it returns a `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const doSomething = () => {\n  return new Promise((resolve, reject) => {\n    // Wait 3s\n    setTimeout(() => {\n      resolve('foo');\n    }, 3000);\n  });\n};\n`}</code></pre>\n    <Preview tabNames={['JavaScript', 'TypeScript']} mdxType=\"Preview\">\n  <editor>\n        {`ref.handle(() => doSomething(), data => {\n  // data is 'foo'\n});\n`}\n  </editor>\n  <editor>\n        {`ref.handle(() => doSomething(), data => {\n  // data is 'foo' and its type is infered\n});\n`}\n  </editor>\n    </Preview>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]}]}