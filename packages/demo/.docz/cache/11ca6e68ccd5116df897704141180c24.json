{"remainingRequest":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/babel-loader/lib/index.js??ref--6-1!/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/@mdx-js/loader/index.js??ref--6-2!/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/source-map-loader/index.js!/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/usage/fetcher-reference.mdx","dependencies":[{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/usage/fetcher-reference.mdx","mtime":1570482574959},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1562869367178},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/babel-loader/lib/index.js","mtime":1562869367050},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/@mdx-js/loader/index.js","mtime":1570479562039},{"path":"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/source-map-loader/index.js","mtime":1562869367869}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/packages/demo/docs/usage/fetcher-reference.mdx"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA,OAAO,qBAAP;AACA,OAAO,qBAAP;AACA,OAAO,qCAAP;;AAEA,MAAMC,aAAa,GAAGC,IAAI,IAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,EAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,SAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAHD;;AAKA,MAAMG,WAAW,GAAG,EAApB;AAGA,MAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAW;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAX,qZALK,EAUL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVK,EAaL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAAuE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAvE,iDAbK,EAcL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yPAAL,CAdK,EAyBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAAkE;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAlE,iBAzBK,EA0BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEA1BK,EA2BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sjBAAL,CA3BK,EA6CL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7CK,EAgDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+MAhDK,EAkDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sPAAL,CAlDK,CAAP;AAmED;;;;;;;;;;;;;AAED;AACAD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAnFMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport 'bulma/css/bulma.css';\nimport '../../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"fetcher-reference\"\n    }}>{`Fetcher Reference`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Fetcher`}</inlineCode>{` component reacts to the behavior of the references it is tied to.\nA reference is basically an API that let you send HTTP (but not only) requests with a simplified syntax.\nYou can create a reference using one of the hooks the library provides.\nNote that with the built-in hooks, ongoing requests are cancelled when your component unmouts, so you\ndo not need to set up manually a cleanup function.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Here's an example on how to fetch from a REST GET endpoint with `}<inlineCode parentName=\"p\">{`useRequest`}</inlineCode>{`, which let you use your own axios instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const [ref, get, items] = useRequest(() => axios.get('http://myapi.com'), true);\n//-- 'items' is the result of the axios request\n//-- 'get' can be called at later date to re-fetch\n\n//...\n<Fetcher refs={ref}>\n  My Content\n</Fetcher>\n`}</code></pre>\n    <p>{`However, note that you are free to use the hooks without a `}<inlineCode parentName=\"p\">{`Fetcher`}</inlineCode>{` tied to it.`}</p>\n    <p>{`Here's another example for a CRUD client implementation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const [getRef, getItems, items] = useRequest(() => axios.get('http://myapi.com'), true);\nconst [postRef, postItem] = useRequest((data) => axios.post('http://myapi.com/', data));\nconst [deleteRef, deleteItem] = useRequest((id) => axios.delete('http://myapi.com/' + id));\nconst [updateRef, updateItem] = useRequest(([id, data]) => axios.patch('http://myapi.com/' + id, data));\n\n//-- Usage\ngetItems();\npostItem(data);\ndeleteItem(1); \nupdateItem([1, data]);\n\n//...\n<Fetcher refs={[getRef, postRef, updateRef, deleteRef]}>\n  My Content\n</Fetcher>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"composability\"\n    }}>{`Composability`}</h2>\n    <p>{`Because fetching is based on hooks, you can combine, reuse them and create your own custom hooks\nto gain in readability and simplicity. The library contains a built-in hook which reflects just that.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const users = useCRUDRequest('http://myapi.com');\n\n//-- Usage\nusers.get();\nusers.items; //-- GET results\nusers.post(data);\nusers.delete(1);\nusers.update([1, data]);\n\n//...\n<Fetcher refs={users.refs}>\n  My Content\n</Fetcher>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]}]}