{"expireTime":9007200825219446000,"key":"gatsby-plugin-mdx-entire-payload-2a33a4e558e01444368034928fb49fa8-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":134,"offset":135},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":137},"end":{"line":5,"column":29,"offset":165},"indent":[]}},{"type":"import","value":"import 'bulma/css/bulma.css';\nimport '../../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';","position":{"start":{"line":8,"column":1,"offset":168},"end":{"line":10,"column":46,"offset":273},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Fetcher Reference","position":{"start":{"line":12,"column":3,"offset":277},"end":{"line":12,"column":20,"offset":294},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":275},"end":{"line":12,"column":20,"offset":294},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":14,"column":1,"offset":296},"end":{"line":14,"column":5,"offset":300},"indent":[]}},{"type":"inlineCode","value":"Fetcher","position":{"start":{"line":14,"column":5,"offset":300},"end":{"line":14,"column":14,"offset":309},"indent":[]}},{"type":"text","value":" component reacts to the behavior of the references it is tied to.\nA reference is basically an API that let you send HTTP (but not only) requests with a simplified syntax.\nYou can create a reference using one of the hooks the library provides.","position":{"start":{"line":14,"column":14,"offset":309},"end":{"line":16,"column":72,"offset":552},"indent":[1,1]}}],"position":{"start":{"line":14,"column":1,"offset":296},"end":{"line":16,"column":72,"offset":552},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":18,"column":4,"offset":557},"end":{"line":18,"column":11,"offset":564},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":554},"end":{"line":18,"column":11,"offset":564},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's an example on how to fetch from a REST GET endpoint with ","position":{"start":{"line":20,"column":1,"offset":566},"end":{"line":20,"column":65,"offset":630},"indent":[]}},{"type":"inlineCode","value":"useRequest","position":{"start":{"line":20,"column":65,"offset":630},"end":{"line":20,"column":77,"offset":642},"indent":[]}},{"type":"text","value":", which let you use your own axios instance:","position":{"start":{"line":20,"column":77,"offset":642},"end":{"line":20,"column":121,"offset":686},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":566},"end":{"line":20,"column":121,"offset":686},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"const [ref, get, items] = useRequest(() => axios.get('http://myapi.com'), true);\n//-- 'items' is the result of the axios request\n//-- 'get' can be called at later date to re-fetch\n\n//...\n<Fetcher refs={ref}>\n  My Content\n</Fetcher>","position":{"start":{"line":21,"column":1,"offset":687},"end":{"line":30,"column":4,"offset":928},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"However, note that you are free to use the hooks without a ","position":{"start":{"line":31,"column":1,"offset":929},"end":{"line":31,"column":60,"offset":988},"indent":[]}},{"type":"inlineCode","value":"Fetcher","position":{"start":{"line":31,"column":60,"offset":988},"end":{"line":31,"column":69,"offset":997},"indent":[]}},{"type":"text","value":" tied to it.","position":{"start":{"line":31,"column":69,"offset":997},"end":{"line":31,"column":81,"offset":1009},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":929},"end":{"line":31,"column":81,"offset":1009},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's another example for a CRUD client implementation.","position":{"start":{"line":33,"column":1,"offset":1011},"end":{"line":33,"column":57,"offset":1067},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1011},"end":{"line":33,"column":57,"offset":1067},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"const [getRef, getItems, items] = useRequest(() => axios.get('http://myapi.com'), true);\nconst [postRef, postItem] = useRequest((data) => axios.post('http://myapi.com/', data));\nconst [deleteRef, deleteItem] = useRequest((id) => axios.delete('http://myapi.com/' + id));\nconst [updateRef, updateItem] = useRequest(([id, data]) => axios.patch('http://myapi.com/' + id, data));\n\n//-- Usage\ngetItems();\npostItem(data);\ndeleteItem(1); \nupdateItem([1, data]);\n\n//...\n<Fetcher refs={[getRef, postRef, updateRef, deleteRef]}>\n  My Content\n</Fetcher>","position":{"start":{"line":34,"column":1,"offset":1068},"end":{"line":50,"column":4,"offset":1619},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Composability","position":{"start":{"line":52,"column":4,"offset":1624},"end":{"line":52,"column":17,"offset":1637},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1621},"end":{"line":52,"column":17,"offset":1637},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Because fetching is based on hooks, you can combine, reuse them and create your own custom hooks\nto gain in readability and simplicity. The library contains a built-in hook which reflects just that.","position":{"start":{"line":53,"column":1,"offset":1638},"end":{"line":54,"column":102,"offset":1836},"indent":[1]}}],"position":{"start":{"line":53,"column":1,"offset":1638},"end":{"line":54,"column":102,"offset":1836},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"const users = useCRUDRequest('http://myapi.com');\n\n//-- Usage\nusers.get();\nusers.items; //-- GET results\nusers.post(data);\nusers.delete(1);\nusers.update([1, data]);\n\n//...\n<Fetcher refs={users.refs}>\n  My Content\n</Fetcher>","position":{"start":{"line":55,"column":1,"offset":1837},"end":{"line":69,"column":4,"offset":2070},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"API","position":{"start":{"line":71,"column":4,"offset":2075},"end":{"line":71,"column":7,"offset":2078},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2072},"end":{"line":71,"column":7,"offset":2078},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":74,"column":1,"offset":2081},"end":{"line":74,"column":31,"offset":2111},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":74,"column":31,"offset":2111}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/media/cyriac/0CC5166B0CC5166B/Work/react-fetcher-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport 'bulma/css/bulma.css';\nimport '../../src/index.css';\nimport 'react-fetcher-hooks/dist/styles.css';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"fetcher-reference\"\n    }}>{`Fetcher Reference`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Fetcher`}</inlineCode>{` component reacts to the behavior of the references it is tied to.\nA reference is basically an API that let you send HTTP (but not only) requests with a simplified syntax.\nYou can create a reference using one of the hooks the library provides.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Here's an example on how to fetch from a REST GET endpoint with `}<inlineCode parentName=\"p\">{`useRequest`}</inlineCode>{`, which let you use your own axios instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const [ref, get, items] = useRequest(() => axios.get('http://myapi.com'), true);\n//-- 'items' is the result of the axios request\n//-- 'get' can be called at later date to re-fetch\n\n//...\n<Fetcher refs={ref}>\n  My Content\n</Fetcher>\n`}</code></pre>\n    <p>{`However, note that you are free to use the hooks without a `}<inlineCode parentName=\"p\">{`Fetcher`}</inlineCode>{` tied to it.`}</p>\n    <p>{`Here's another example for a CRUD client implementation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const [getRef, getItems, items] = useRequest(() => axios.get('http://myapi.com'), true);\nconst [postRef, postItem] = useRequest((data) => axios.post('http://myapi.com/', data));\nconst [deleteRef, deleteItem] = useRequest((id) => axios.delete('http://myapi.com/' + id));\nconst [updateRef, updateItem] = useRequest(([id, data]) => axios.patch('http://myapi.com/' + id, data));\n\n//-- Usage\ngetItems();\npostItem(data);\ndeleteItem(1); \nupdateItem([1, data]);\n\n//...\n<Fetcher refs={[getRef, postRef, updateRef, deleteRef]}>\n  My Content\n</Fetcher>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"composability\"\n    }}>{`Composability`}</h2>\n    <p>{`Because fetching is based on hooks, you can combine, reuse them and create your own custom hooks\nto gain in readability and simplicity. The library contains a built-in hook which reflects just that.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const users = useCRUDRequest('http://myapi.com');\n\n//-- Usage\nusers.get();\nusers.items; //-- GET results\nusers.post(data);\nusers.delete(1);\nusers.update([1, data]);\n\n//...\n<Fetcher refs={users.refs}>\n  My Content\n</Fetcher>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}